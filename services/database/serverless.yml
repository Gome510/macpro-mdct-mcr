service: database

frameworkVersion: "3"

plugins:
  - serverless-dynamodb
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper
  - serverless-offline

s3BucketHelper:
  loggingConfiguration:
    destinationBucketName: ${env:LOGGING_BUCKET, ssm:/configuration/${self:custom.stage}/s3/accessLogsBucket, ssm:/configuration/default/s3/accessLogsBucket}
    logFilePrefix: ${env:LOGGING_BUCKET, ssm:/configuration/${self:custom.stage}/s3/accessLogsPrefix, ssm:/configuration/default/s3/accessLogsPrefix}

custom:
  project: "mcr"
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverlessTerminationProtection:
    stages:
      - main
      - val
      - production
  dotenv:
    path: ../../.env
  bannerTableName: ${self:custom.stage}-banners
  formTemplateTableName: ${self:custom.stage}-form-template-versions
  mcparReportTableName: ${self:custom.stage}-mcpar-reports
  mcparFormBucket: ${env:MCPAR_FORM_BUCKET, "${self:service}-${self:custom.stage}-mcpar"}
  mlrReportTableName: ${self:custom.stage}-mlr-reports
  mlrFormBucket: ${env:MLR_FORM_BUCKET, "${self:service}-${self:custom.stage}-mlr"}
  naaarReportTableName: ${self:custom.stage}-naaar-reports
  naaarFormBucket: ${env:NAAAR_FORM_BUCKET, "${self:service}-${self:custom.stage}-naaar"}
  bootstrapBrokerStringTls: ${env:BROKER_STRINGS, ssm:/configuration/${self:custom.stage}/bigmac/bootstrapBrokerStringTls, ssm:/configuration/default/bigmac/bootstrapBrokerStringTls}
  vpcId: ${env:VPC_ID, ssm:/configuration/${self:custom.stage}/vpc/id, ssm:/configuration/default/vpc/id}
  privateSubnets:
    - ${env:VPC_SUBNET_A, ssm:/configuration/${self:custom.stage}/vpc/subnets/private/a/id, ssm:/configuration/default/vpc/subnets/private/a/id}
    - ${env:VPC_SUBNET_B, ssm:/configuration/${self:custom.stage}/vpc/subnets/private/b/id, ssm:/configuration/default/vpc/subnets/private/b/id}
    - ${env:VPC_SUBNET_C, ssm:/configuration/${self:custom.stage}/vpc/subnets/private/c/id, ssm:/configuration/default/vpc/subnets/private/c/id}
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
params:
  main:
    topicNamespace: ""
  val:
    topicNamespace: ""
  production:
    topicNamespace: ""
  default:
    topicNamespace: --${self:custom.project}--${sls:stage}--
provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
    # MCPAR_FORM_BUCKET: ${self:custom.mcparFormBucket}
    # MLR_FORM_BUCKET: ${self:custom.mlrFormBucket}
    # NAAAR_FORM_BUCKET: ${self:custom.naaarFormBucket}
    STAGE: ${self:custom.stage}
  iam:
    role:
      path: ${env:IAM_PATH, ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${env:IAM_PERMISSIONS_BOUNDARY, ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
      statements:
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:ListBucket"
            - "s3:PutObject"
          Resource:
            - !Sub "arn:aws:s3:::${self:service}-${self:custom.stage}-${self:custom.mcparFormBucket}"
            - !Sub "arn:aws:s3:::${self:service}-${self:custom.stage}-${self:custom.mcparFormBucket}/formTemplates/*"
            - !Sub "arn:aws:s3:::${self:service}-${self:custom.stage}-${self:custom.mcparFormBucket}/fieldData/*"
            - !Sub "arn:aws:s3:::${self:service}-${self:custom.stage}-${self:custom.mlrFormBucket}"
            - !Sub "arn:aws:s3:::${self:service}-${self:custom.stage}-${self:custom.mlrFormBucket}/formTemplates/*"
            - !Sub "arn:aws:s3:::${self:service}-${self:custom.stage}-${self:custom.mlrFormBucket}/fieldData/*"
            - !Sub "arn:aws:s3:::${self:service}-${self:custom.stage}-${self:custom.naaarFormBucket}"
            - !Sub "arn:aws:s3:::${self:service}-${self:custom.stage}-${self:custom.naaarFormBucket}/*"
            - !Sub "arn:aws:s3:::${self:service}-${self:custom.stage}-${self:custom.naaarFormBucket}/*"

functions:
  postKafkaData:
    handler: handlers/kafka/post/postKafkaData.handler
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
      topicNamespace: ${param:topicNamespace}
    maximumRetryAttempts: 2
    timeout: 120
    memorySize: 2048
    vpc:
      securityGroupIds:
        - Ref: KafkaSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt McparReportTable.StreamArn
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: !GetAtt MlrReportTable.StreamArn
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: !GetAtt NaaarReportTable.StreamArn
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
  postNaaarBucketData:
    handler: handlers/kafka/post/postKafkaData.handler
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
      topicNamespace: ${param:topicNamespace}
    maximumRetryAttempts: 2
    timeout: 120
    memorySize: 2048
    vpc:
      securityGroupIds:
        - Ref: KafkaSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
  postMlrBucketData:
    handler: handlers/kafka/post/postKafkaData.handler
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
      topicNamespace: ${param:topicNamespace}
    maximumRetryAttempts: 2
    timeout: 120
    memorySize: 2048
    vpc:
      securityGroupIds:
        - Ref: KafkaSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
  postMcparBucketData:
    handler: handlers/kafka/post/postKafkaData.handler
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
      topicNamespace: ${param:topicNamespace}
    maximumRetryAttempts: 2
    timeout: 120
    memorySize: 2048
    vpc:
      securityGroupIds:
        - Ref: KafkaSecurityGroup
      subnetIds: ${self:custom.privateSubnets}

resources:
  Resources:
    BannerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.bannerTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
    McparReportTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.mcparReportTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: state
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: state
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
    McparFormBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.mcparFormBucket}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Filter:
                S3Key:
                  Rules:
                    - Name: prefix
                      Value: fieldData/
                    - Name: suffix
                      Value: .json
              Function: !GetAtt PostMcparBucketDataLambdaFunction.Arn
      DependsOn: McparS3BucketTrigger
    McparS3BucketTrigger:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt PostMcparBucketDataLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceArn: "arn:aws:s3:::${self:service}-${self:custom.stage}-${self:custom.mcparFormBucket}"
    MlrReportTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.mlrReportTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: state
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: state
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
    MlrFormBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.mlrFormBucket}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Filter:
                S3Key:
                  Rules:
                    - Name: prefix
                      Value: fieldData/
                    - Name: suffix
                      Value: .json
              Function: !GetAtt PostMlrBucketDataLambdaFunction.Arn
      DependsOn: MlrS3BucketTrigger
    MlrS3BucketTrigger:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt PostMlrBucketDataLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceArn: "arn:aws:s3:::${self:service}-${self:custom.stage}-${self:custom.mlrFormBucket}"
    NaaarReportTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.naaarReportTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: state
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: state
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
    NaaarFormBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.naaarFormBucket}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Filter:
                S3Key:
                  Rules:
                    - Name: prefix
                      Value: fieldData/
                    - Name: suffix
                      Value: .json
              Function: !GetAtt PostNaaarBucketDataLambdaFunction.Arn
      DependsOn: NaaarS3BucketTrigger
    NaaarS3BucketTrigger:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt PostNaaarBucketDataLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceArn: "arn:aws:s3:::${self:service}-${self:custom.stage}-${self:custom.naaarFormBucket}"

    FormTemplateVersionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.formTemplateTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
        LocalSecondaryIndexes:
          - IndexName: LastAlteredIndex
            KeySchema:
              - AttributeName: reportType
                KeyType: HASH
              - AttributeName: lastAltered
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: IdIndex
            KeySchema:
              - AttributeName: reportType
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: HashIndex
            KeySchema:
              - AttributeName: reportType
                KeyType: HASH
              - AttributeName: md5Hash
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        KeySchema:
          - AttributeName: reportType
            KeyType: HASH
          - AttributeName: versionNumber
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: reportType
            AttributeType: S
          - AttributeName: versionNumber
            AttributeType: N
          - AttributeName: lastAltered
            AttributeType: S
          - AttributeName: id
            AttributeType: S
          - AttributeName: md5Hash
            AttributeType: S
    KafkaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for streaming functions.  Egress all is set by default.
        VpcId: ${self:custom.vpcId}

  Outputs:
    BannerTableName:
      Value: !Ref BannerTable
    BannerTableArn:
      Value: !GetAtt BannerTable.Arn
    BannerTableStreamArn:
      Value: !GetAtt BannerTable.StreamArn
    FormTemplateTableName:
      Value: !Ref FormTemplateVersionsTable
    McparReportTableName:
      Value: !Ref McparReportTable
    McparReportTableArn:
      Value: !GetAtt McparReportTable.Arn
    McparReportTableStreamArn:
      Value: !GetAtt McparReportTable.StreamArn
    McparFormBucketName:
      Value: !Ref McparFormBucket
    McparFormBucketArn:
      Value: !GetAtt McparFormBucket.Arn
    MlrReportTableName:
      Value: !Ref MlrReportTable
    MlrReportTableArn:
      Value: !GetAtt MlrReportTable.Arn
    MlrReportTableStreamArn:
      Value: !GetAtt MlrReportTable.StreamArn
    MlrFormBucketName:
      Value: !Ref MlrFormBucket
    MlrFormBucketArn:
      Value: !GetAtt MlrFormBucket.Arn
    NaaarReportTableName:
      Value: !Ref NaaarReportTable
    NaaarReportTableArn:
      Value: !GetAtt NaaarReportTable.Arn
    NaaarReportTableStreamArn:
      Value: !GetAtt NaaarReportTable.StreamArn
    NaaarFormBucketName:
      Value: !Ref NaaarFormBucket
    NaaarFormBucketArn:
      Value: !GetAtt NaaarFormBucket.Arn
    Region:
      Value: !Sub ${AWS::Region}
